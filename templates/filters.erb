filter {

	if [type] == "auth" or [type] == "syslog" {
		grok {
			match => {
				"message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
			}
		}
		date {
			match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
		mutate {
			remove_field => [
				"syslog_timestamp"
			]
			rename => [ "syslog_host", "host" ]
		}
	}

	if [type] == "collectd" {

		grok {
			match => {
				"message" => [
					"PUTVAL %{HOSTNAME:collectd_host}/cpu-%{INT:cpu_core:int}/cpu-%{DATA:cpu_type} interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:cpu_jiffies:int}",
					"PUTVAL %{HOSTNAME:collectd_host}/df-%{DATA:df_partition}/df_%{DATA:df_type} interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:df_bytes:float}",
					"PUTVAL %{HOSTNAME:collectd_host}/disk-%{DATA:disk_partition}/disk_%{DATA:disk_type} interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:disk_read:float}:%{NUMBER:disk_write:float}",
					"PUTVAL %{HOSTNAME:collectd_host}/interface-%{DATA:interface_name}/if_%{DATA:interface_type} interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:interface_rx:float}:%{NUMBER:interface_tx:float}",
					"PUTVAL %{HOSTNAME:collectd_host}/load/load interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:average_15m:float}:%{NUMBER:average_5m:float}:%{NUMBER:average_1m:float}",
					"PUTVAL %{HOSTNAME:collectd_host}/memory/memory-%{DATA:memory_type} interval=%{NUMBER:interval:float} %{NUMBER:collectd_timestamp}:%{NUMBER:memory_bytes:float}"
				]
			}
		}

		date {
			match => [ "collectd_timestamp", "UNIX" ]
		}

		ruby {
			code => "
				counter_loc = '/tmp/logstash_counters/'

				system 'mkdir', '-p', counter_loc

				event['cpu_core'] += 1 if event['cpu_core']

				if event['df_bytes']
					event['df_kbytes'] = event['df_bytes'] / 1024
					event['df_mbytes'] = event['df_bytes'] / 1024 / 1024
					event['df_gbytes'] = event['df_bytes'] / 1024 / 1024 / 1024

					if event['df_type'] == 'complex'
						event.cancel
					end
				end

				if event['interface_rx']

					if event['interface_type'] == 'octets'

						rx_file = counter_loc + event['collectd_host'] + ':rx'
            tx_file = counter_loc + event['collectd_host'] + ':tx'

            stored_rx = File.file?(rx_file) ? File.read(rx_file).to_i : event['interface_rx']
            stored_tx = File.file?(tx_file) ? File.read(tx_file).to_i : event['interface_tx']

            diff_rx = event['interface_rx'] - stored_rx
            diff_tx = event['interface_tx'] - stored_tx

            File.open(rx_file, 'w') { |file| file.write(event['interface_rx']) }
            File.open(tx_file, 'w') { |file| file.write(event['interface_tx']) }

						event['interface_rx_bytes_s'] = diff_rx/ event['interval']

						event['interface_tx_bytes_s'] = diff_tx / event['interval']

					end

					if event['interface_type'] == 'packets'
						event['interface_rx_packets_s'] = event['interface_rx'] / event['interval']
						event['interface_tx_packets_s'] = event['interface_tx'] / event['interval']
					end

					if event['interface_type'] == 'errors'
						event['interface_rx_errors_s'] = event['interface_rx'] / event['interval']
						event['interface_tx_errors_s'] = event['interface_tx'] / event['interval']
					end

				end

				if event['disk_read'] and event['disk_write']

					if event['disk_type'] == 'octets'

						event['disk_read_bytes_s'] = event['disk_read'] / event['interval']
						event['disk_read_kbytes_s'] = event['disk_read'] / event['interval'] / 1024
						event['disk_read_mbytes_s'] = event['disk_read'] / event['interval'] / 1024 / 1024
						event['disk_read_gbytes_s'] = event['disk_read'] / event['interval'] / 1024 / 1024 / 1024

						event['disk_write_bytes_s'] = event['disk_write'] / event['interval']
						event['disk_write_kbytes_s'] = event['disk_write'] / event['interval'] / 1024
						event['disk_write_mbytes_s'] = event['disk_write'] / event['interval'] / 1024 / 1024
						event['disk_write_gbytes_s'] = event['disk_write'] / event['interval'] / 1024 / 1024 / 1024

					end

					if event['disk_type'] == 'time'

						event['disk_read_us_s'] = event['disk_read'] / event['interval']
						event['disk_read_ms_s'] = event['disk_read'] / event['interval'] / 1000
						event['disk_read_s_s'] = event['disk_read'] / event['interval'] / 1000 / 1000

						event['disk_write_us_s'] = event['disk_write'] / event['interval']
						event['disk_write_ms_s'] = event['disk_write'] / event['interval'] / 1000
						event['disk_write_s_s'] = event['disk_write'] / event['interval'] / 1000 / 1000

					end

					if event['disk_type'] == 'merged'
						event['disk_read_merged_s'] = event['disk_read'] / event['interval']
						event['disk_write_merged_s'] = event['disk_write'] / event['interval']
					end

					if event['disk_type'] == 'ops'
						event['disk_read_ops_s'] = event['disk_read'] / event['interval']
						event['disk_write_ops_s'] = event['disk_write'] / event['interval']
					end

				end

				if event['memory_bytes']
					event['memory_kbytes'] = event['memory_bytes'] / 1024
					event['memory_mbytes'] = event['memory_bytes'] / 1024 / 1024
					event['memory_gbytes'] = event['memory_bytes'] / 1024 / 1024 / 1024
				end
			"
		}

		mutate {
			remove_field => [
				"collectd_timestamp",
				"interval",
				"path"
			]
			rename => [ "collectd_host", "host" ]
		}

	}

}
